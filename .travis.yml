language: rust
rust:
  - stable
  - beta
  - nightly
cache: cargo
jobs:
  allow_failures:
    - rust: nightly
  fast_finish: true

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev

before_script: |
  if [[ "$TRAVIS_RUST_VERSION" == stable ]]; then
    # cargo install cargo-tarpaulin
  fi
  if [[ "$TRAVIS_EVENT_TYPE" == cron ]]; then
    for TAG in $(git tag | grep -)
    do
      git push --delete https://${GITHUB_TOKEN}@github.com/frosklis/dinero-rs.git  $TAG 
    done
  fi 

script:
- cargo build
- cargo test
after_success: |
  if [[ "$TRAVIS_RUST_VERSION" == stable ]]; then
    # cargo tarpaulin --out Xml
    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    tar xzf master.tar.gz &&
    cd kcov-master &&
    mkdir build &&
    cd build &&
    cmake .. &&
    make &&
    make install DESTDIR=../../kcov-build &&
    cd ../.. &&
    rm -rf kcov-master &&
    for file in target/debug/examplerust-*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
    
    bash <(curl -s https://codecov.io/bash)
    echo "Uploaded code coverage"
    # If this build is not from a tag, create one
    if [[ "$TRAVIS_TAG" == "" ]]; then
      # Build a tag
      # This prints the version number
      export version=$(grep -E "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+\.[0-9]+.[0-9]+")
      export line_number=$(grep -En "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+" | head -n 1)
      sed -i "${line_number}s/.*/version = \"${version}-build-${TRAVIS_BUILD_NUMBER}\"/" Cargo.toml 
      git tag -a -m "automated tag from Travis [ci skip]" ${version}-build-${TRAVIS_BUILD_NUMBER}
      git push -f --tags https://${GITHUB_TOKEN}@github.com/frosklis/dinero-rs.git
    elif [[ "$TRAVIS_TAG" != *"build"* ]]; then
      rm cobertura.xml
      cargo publish --token ${CARGO_TOKEN}
    fi 
  fi
