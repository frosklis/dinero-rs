//
// Grammar specification for ledger files as interpreted by dinero rs
// Test in https:://pest.rs
//

journal = { SOI ~ (directive | blank_line | transaction | journal_comment )+ ~ EOI}
blank_line = {ws* ~ NEWLINE }
directives = {directive* ~ EOI}
journal_comment = {(";" | "!" | "#") ~ (!end ~ ANY)* ~ end}

// Directives
directive = { include | price
    // tag 
    | account_dir 
    | commodity 
    | payee_dir 
    }

include = { "include" ~ws+ ~ (string | (!end ~ ANY)*)   ~ws*~end}
price = {"P" ~ ws* ~ date ~ (ws ~ time)? ~ ws+ ~ currency ~ ws* ~number ~ ws* ~ currency ~ws* ~ comment? ~ end}
commodity = { "commodity" ~ ws+ ~ currency ~ ws* ~ comment? ~ end ~
    (sep ~ 
        ( 
            comment 
            | (property ~ ws+ ~ (string | ( !";" ~ !end ~ ANY )*) ~ ws* ~ comment?) 
            | (flag ~ ws* ~ comment?)
        )?
    ~end)*
    }
payee_dir = { "payee" ~ ws+ ~ payee ~ ws* ~ comment? ~end ~ 
    (sep ~ 
        ( 
            comment 
            | (property ~ ws+ ~ (string | ( !";" ~ !end ~ ANY )*) ~ ws* ~ comment?) 
        )? 
    ~end)*
    }
account_dir = { "account" ~ ws+ ~ account ~ ws* ~ comment? ~ end ~
    (sep ~ 
        ( 
            comment 
            | (account_property ~ ws+ ~ (string | ( !";" ~ !end ~ ANY )*) ~ ws* ~ comment?) 
            | (flag ~ ws* ~ comment?)
        )?
    ~end)*
    }
property = { "alias" }
flag = { "default" }
account_property = { "alias" | "payee" }
// A transaction
transaction_head = {
    date ~ (ws ~ time)? ~           // date
    ("=" ~ date ~ (ws ~ time)?)? ~  // effective_date
    ws+ ~ status? ~                 // status
    ws* ~ code?                     // code
    ~ ws* ~ description             // description
    ~ ws* ~ ("|" ~ ws* ~payee)?     // payee
    ~ws* ~ comment? }               // comment
transaction = {transaction_head
    ~ NEWLINE
    ~ (sep ~ comment ~ end)*
    ~ posting+ }

code = { "(" ~ string ~ ")" }
status = { "*"| "!" }
quote = _{"\"" | "'"}
payee = { string | (!"|" ~ !";" ~!end ~ ANY)* }
description = { string | (!"|" ~ !";" ~!end ~ ANY)* }
comment = {";" ~ (!end ~ ANY)*}

posting = {  sep ~ status? ~ 
	( ("(" ~ account ~ ")") | ("[" ~ account ~ "]") | account ) ~ 
    ((sep ~ ws* ~ (money ~ ws*) ~ (("@@" | "@") ~ ws* ~ money ~ ws*)?)? ~
    ("=" ~ ws* ~ money ~ ws*)? ~ ws* ~ comment? ~ end )
    ~ (sep ~ comment ~ end)*
    }
    
account = { string | ((unquoted ~ (" " ~ unquoted)*)) ~ (":" ~ (unquoted ~ (" " ~ unquoted)*))* }
// Dates
date = { year ~ date_sep ~ month ~ date_sep ~ day }
time = { hour ~ ":" ~ minute ~ (":" ~ second) }
datetime = { date ~ (ws ~ time)? }

date_sep = { "." | "/" | "-"}
year = { "-"? ~ bigint}
month = {("1" ~ ("0" | "1" | "2")) | ("0"? ~ ASCII_NONZERO_DIGIT)}
day = {("3" ~ ("0" | "1")) |
	(("1" | "2") ~ ASCII_DIGIT ) |
    ("0"? ~ ASCII_NONZERO_DIGIT) }
hour = { (("0"|"1") ~ ASCII_DIGIT) | ("2" ~ ("0" ~"1" ~"2" ~"3"))}
minute = { ("0"|"1"|"2"|"3"|"4"|"5") ~ ASCII_DIGIT }
second = { ("0"|"1"|"2"|"3"|"4"|"5") ~ ASCII_DIGIT ~ ("." ~ bigint)? }


// Grammar specification for value expressions

// A value expression is an expression between parenthesis
value_expr = {"(" ~ ws* ~ expr ~ ws* ~ ")"}

// Then the expression builds up in terms of increasing preference
expr = { or_expr }
or_expr = { and_expr ~ ws* ~ ( or ~ ws* ~ and_expr ) * }
and_expr = { comparison_expr ~ ws* ~ ( and ~ ws* ~ comparison_expr ) * }
comparison_expr = { additive_expr ~ ws* ~ ( comparison ~ ws* ~ additive_expr ) * }
additive_expr = { multiplicative_expr ~ ws* ~ ( add ~ ws* ~ multiplicative_expr ) * }
multiplicative_expr = { primary ~ ws* ~ ( mult ~ ws* ~ primary )* }
primary = {
    ("(" ~ ws* ~ expr ~ ws* ~ ")") |
    (unary ~ ws* ~ expr) |
    term |
    (function ~ ws* ~ "(" ~ ws* ~ expr ~ ws* ~ ("," ~ ws* ~ expr ~ ws*)* ~ ")")
    }

term = _{ variable | money | number | regex | string }
money = { (number ~ ws* ~ currency) | (currency ~ ws* ~ number) }
currency = { string | unquoted_no_number }
regex = { "/" ~ (!"/" ~ ANY)* ~ "/"}
string = {
	("\"" ~ (("\\\"") | (!"\"" ~ ANY))* ~ "\"") |
	("'" ~ (("\\'") | (!"'" ~ ANY))* ~ "'")
    }
reserved = _{ "\n" | "+" | "*" | "/" | "\\" | "|" | "%" | "<" | ">" | ":" | "?" |  "(" |  ")" | ";"}
unquoted = { !reserved ~ !"=" ~ !"-" ~ !"&" ~
    (!reserved ~ !SEPARATOR ~ ANY)+ }
unquoted_no_number = { !reserved ~ !"=" ~ !"-" ~ !"&" ~
    (!reserved ~ !SEPARATOR ~ !ASCII_DIGIT ~ ANY)+ }
variable = {
    "account" |
    "payee" |
    "date" |
    "note" |
    "amount" |
    "total_amount" |
    "cost" |
    "value" |
    "gain" |
    "depth" |
    "posting_number" |
    "posting_count" |
    "cleared" |
    "real" |
    "not_automated" |
    "running_total" |
    "note" |
    // Abbreviations go later
    "T" | "N" | "O" | "Z" | "R" | "X" |
    "n" | "l" | "g" | "v" | "b"
}


// helpers
number = { "-"? ~ bigint ~ ("." ~ bigint)? }
bigint = _{ ASCII_DIGIT+ }
ws = _{" "}
sep = _{("\t" | " \t" | "  ") ~ SEPARATOR* }
end = { EOI | NEWLINE }


add = { "+" | "-" }
mult = { "*" | "/" }
and = {"&" | "and"}
or = {"|" | "or" }
unary = { "-" | "!" | "not" }
function = { "abs" | "has_tag" | "to_date" | "any" | "tag" }
comparison = { eq | ne | ge | gt | le | lt }
eq = { "=~" | "=="}
ne = { "!=" }
gt = { ">" }
ge = { ">=" }
le = { "<=" }
lt = { "<" }